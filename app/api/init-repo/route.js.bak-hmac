import { requireHmac } from '../../../lib/security/guard.mjs';
import crypto from "crypto";

function verify(raw, sig, secret) {
  const h = crypto.createHmac("sha256", secret); h.update(raw);
  const expected = "sha256="+h.digest("hex");
  try { return crypto.timingSafeEqual(Buffer.from(expected), Buffer.from(sig||"")); } catch { return false; }
}

export async function POST(req) {
  const raw = await req.text();
  if (!verify(raw, req.headers.get("x-signature"), process.env.BRIDGE_SECRET))
    return new Response(JSON.stringify({ ok:false, error:"SIGNATURE_INVALID" }), { status:401 });

  const { owner, repoName, template } = JSON.parse(raw||"{}");
  // For safety, stub successful response; real impl should create repo via GitHub App
  return new Response(JSON.stringify({ ok:true, repoUrl:`https://github.com/${owner||"org"}/${repoName||"repo"}`, prUrl:null }), { status:200 });
}
