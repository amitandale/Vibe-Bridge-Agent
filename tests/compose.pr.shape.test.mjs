import test from 'node:test';
import assert from 'node:assert/strict';
import { __setRunClaudeSessionForTests } from '../lib/ai/claude/cli-bridge.mjs';
import { composePR } from '../lib/ai/orchestrator/run.mjs';
import { tmpdir } from 'node:os';
import { join } from 'node:path';
import { promises as fs } from 'node:fs';

function withMockedFetch(fn) {
  const original = globalThis.fetch;
  globalThis.fetch = async (url, init) => {
    const u = String(url);
    const method = (init && init.method) || 'GET';
    if (u.includes('/git/refs/heads/main') && method === 'GET') {
      return new Response(JSON.stringify({ object: { sha: 'abc' } }), { status: 200 });
    }
    if (u.endsWith('/git/refs') && method === 'POST') {
      return new Response(JSON.stringify({ ref: 'refs/heads/ai/x', object: { sha: 'abc' } }), { status: 201 });
    }
    if (u.includes('/contents/') && method === 'PUT') {
      return new Response(JSON.stringify({ content: { path: 'x' }, commit: { sha: 'def' } }), { status: 201 });
    }
    if (u.endsWith('/pulls') && method === 'POST') {
      return new Response(JSON.stringify({ html_url: 'https://example.com/pr/42', title: 'Add README', body: 'Generated by agent', number: 42 }), { status: 201 });
    }
    return new Response('', { status: 404 });
  };
  return fn().finally(() => { globalThis.fetch = original; });
}

test('composePR: applies changes and returns PR info', async () => {
  process.env.GITHUB_REPO = 'owner/name';

  __setRunClaudeSessionForTests(async () => ({
    changes: [{ path:'README.md', content:'# Hello\n' }],
    pr: { title:'Add README', body:'Generated by agent' }
  }));

  await withMockedFetch(async () => {
    const projectRoot = join(tmpdir(), 'agent-orch-test');
    await fs.mkdir(projectRoot, { recursive: true });
    const res = await composePR({ projectRoot, prompt:'create readme', roster:['node'], ticket:'VIBE-1', onLog:()=>{} });
    assert.equal(res.ok, true);
    assert.ok(res.pr && res.pr.url);
    assert.ok(res.changedFiles.find(p => p === 'README.md'));
  });
});
